"""
KOI 부설 과학연구소에서는 많은 종류의 산성 용액과 알칼리성 용액을 보유하고 있다. 각 용액에는 그 용액의 특성을 나타내는 하나의 정수가 주어져있다.  산성 용액의 특성값은 1부터 1,000,000,000까지의 양의 정수로 나타내고, 알칼리성 용액의 특성값은 -1부터 -1,000,000,000까지의 음의 정수로 나타낸다.

같은 양의 두 용액을 혼합한 용액의 특성값은 혼합에 사용된 각 용액의 특성값의 합으로 정의한다. 이 연구소에서는 같은 양의 두 용액을 혼합하여 특성값이 0에 가장 가까운 용액을 만들려고 한다. 

예를 들어, 주어진 용액들의 특성값이 [-2, 4, -99, -1, 98]인 경우에는 특성값이 -99인 용액과 특성값이 98인 용액을 혼합하면 특성값이 -1인 용액을 만들 수 있고, 이 용액이 특성값이 0에 가장 가까운 용액이다. 참고로, 두 종류의 알칼리성 용액만으로나 혹은 두 종류의 산성 용액만으로 특성값이 0에 가장 가까운 혼합 용액을 만드는 경우도 존재할 수 있다.

산성 용액과 알칼리성 용액의 특성값이 주어졌을 때, 이 중 두 개의 서로 다른 용액을 혼합하여 특성값이 0에 가장 가까운 용액을 만들어내는 두 용액을 찾는 프로그램을 작성하시오.

입력
첫째 줄에는 전체 용액의 수 N이 입력된다. N은 2 이상 100,000 이하이다. 둘째 줄에는 용액의 특성값을 나타내는 N개의 정수가 빈칸을 사이에 두고 주어진다. 이 수들은 모두 -1,000,000,000 이상 1,000,000,000 이하이다. N개의 용액들의 특성값은 모두 다르고, 산성 용액만으로나 알칼리성 용액만으로 입력이 주어지는 경우도 있을 수 있다.

출력
첫째 줄에 특성값이 0에 가장 가까운 용액을 만들어내는 두 용액의 특성값을 출력한다. 출력해야하는 두 용액은 특성값의 오름차순으로 출력한다. 특성값이 0에 가장 가까운 용액을 만들어내는 경우가 두 개 이상일 경우에는 그 중 아무것이나 하나를 출력한다.

입력 예시   
5
-2 4 -99 -1 98

출력 예시
-99 98
"""
# 시간초과 .. 


"""
# Good: 2.27s
import numba

#@numba.jit
def computeSum(size: float) -> int:
    sum = 0
    for i in range(size):
        sum += i
    return sum

def main():
    size = 10000
    for _ in range(size):
        sum = computeSum(size)

main()

(numba.jit를 사용한다.
numba는 파이썬 코드를 실행할 수 있는 기계어 코드로 실시간 변환해준다. 이를 통해 코드의 실행 속도를 크게 개선할 수 있다.)
위 방법 시도 했을 때 코랩에서는 정상적으로 프로그램 돌아갔지만
제출했을 때 시간초과가 아닌 잘못된 풀이로 나옴 .. 

"""

n = int(input()) # 특성 값의 개수

characteristic_value = list(map(int,input().split())) # 특성값을 저장할 리스트 생성 및 사용자로 부터 입력 받은 값들로 초기화

#result = [] # 혼합 특성값들을 저장할 리스트
min_result = abs(characteristic_value[0] + characteristic_value[1]) # 혼합 특성값 처음 조합으로 초기화
min_i = 0 # 가장 0에 가까운 혼합 특성값을 가지는 조합의 특성값을 저장할 변수
min_j = 0 # 가장 0에 가까운 혼합 특성값을 가지는 조합의 나머지 하나의 특성값을 저장할 변수
for i in range(n):
    for j in range(n):
        if i != j:
            if min_result > abs(characteristic_value[i] + characteristic_value[j]):
                min_result = abs(characteristic_value[i] + characteristic_value[j])
                min_i = i
                min_j = j
        else:
          continue

                
print(characteristic_value[min_i], characteristic_value[min_j])
