# condingtest_with_python_part2_greedy
# 구현_시각.py
# 정수 N이 입력된 00시 00분 00초부터 N시 59분 59초 까지의 모든 시각 중에서
# 3이 하나라도 포함되는 모든 경우의 수를 구하라

# 내 풀이

## 3이들어가는 시각은 (0~23) 에서 3,13,23시이다. 해당 시각들은 한 시간 내내 3이 포함
## 되므로 3600번 
## 나머지는 1시간에 3이 몇 번 등장? : 분 (n(3,13,23,30~39,43,53) == 15) * 60초
## 위 시간을 제외한 나머지 총 0~59 중 분에 3이 포함되는 15가지 경우를 제외한 45가지의 경우는
## 1 분당 3,13,23,30~39,43,53초 이렇게 15번  등장
## 따라서 시의 3이 포함되는 경우는 3600번 등장
## 시의 3이 포함되지 않는 경우는 (15*60 + 45*6) 번 등장
## three_number = 0부터 N까지 3이 포함되는 숫자 개수 카운팅
## (three_number*3600) + (N - three_number) * (15*60 + 45*6)


#나의 풀이

N = int(input())

if N == 23:
  three_number = 3
elif N >= 13:
  three_number = 2
elif N >= 3:
  three_number = 1


# 결과 출력
print((three_number*3600) + (((N + 1) - three_number) * ( (15*60) + (45*15) )))


# 교재 풀이

# H를 입력받기
H = int(input())

count = 0
for i in range(H + 1):
  for j in range(60):
    for k in range(60):
      # 매 시각 안에 '3'이 포함되어 있다면 카운트 증가
      if '3' in str(i) + str(j) + str(k):
        count += 1

print(count)




# 느낀점 
"""
이번에는 단순히 반복문을 사용하지 않고 수학적인 아이디어를 이용해 풀어보았는데
전체 N이 10만이하의 숫자(00시부터 23시59분59초까지 86400가지)이므로
파이썬 문자열 연산을 이용해도 됐었다. 그렇게 했다면 수학적 아이디어를 이용했을 때보다
더 빠르게 풀수 있었을 것이다. N을 잘 고려해야겠다고 생각했다.
해당 문제는 가능한 경우의 수를 모두 검사해보는 탐색방법인 완전 탐색 알고리즘으로 분류된다.
완전 탐색 알고리즘은 비효율적인 시간 복잡도를 가지고 있으므로 확인해야할 전체 데이터의 개수가
100만개 이하일 때 사용하면 적절하다고 한다!
또한 2020년 기준 파이썬 3.7로 코드 작성할 때 1초에 2000만 번의 연산을 수행한다고 가정하고 문제푼다면
실행 시간 제한에 안정적라는 점도 유념하고 문제를 풀어야 겠다고 생각했다.
"""
